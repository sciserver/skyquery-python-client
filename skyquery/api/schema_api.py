# coding: utf-8

"""
    null

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: null
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from skyquery.api_client import ApiClient


class SchemaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_dataset(self, dataset_name, **kwargs):  # noqa: E501
        """Returns information about a single dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dataset(dataset_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dataset_with_http_info(dataset_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dataset_with_http_info(dataset_name, **kwargs)  # noqa: E501
            return data

    def get_dataset_with_http_info(self, dataset_name, **kwargs):  # noqa: E501
        """Returns information about a single dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dataset_with_http_info(dataset_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_name' is set
        if ('dataset_name' not in params or
                params['dataset_name'] is None):
            raise ValueError("Missing the required parameter `dataset_name` when calling `get_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_name' in params:
            path_params['datasetName'] = params['dataset_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Schema.svc/datasets/{datasetName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dataset',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_table(self, dataset_name, table_name, **kwargs):  # noqa: E501
        """Returns information about a single table.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_table(dataset_name, table_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :param str table_name: null (required)
        :return: Table
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_table_with_http_info(dataset_name, table_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_table_with_http_info(dataset_name, table_name, **kwargs)  # noqa: E501
            return data

    def get_table_with_http_info(self, dataset_name, table_name, **kwargs):  # noqa: E501
        """Returns information about a single table.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_table_with_http_info(dataset_name, table_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :param str table_name: null (required)
        :return: Table
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_name', 'table_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_name' is set
        if ('dataset_name' not in params or
                params['dataset_name'] is None):
            raise ValueError("Missing the required parameter `dataset_name` when calling `get_table`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `get_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_name' in params:
            path_params['datasetName'] = params['dataset_name']  # noqa: E501
        if 'table_name' in params:
            path_params['tableName'] = params['table_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Schema.svc/datasets/{datasetName}/tables/{tableName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Table',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_view(self, dataset_name, view_name, **kwargs):  # noqa: E501
        """Returns information about a single view.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_view(dataset_name, view_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :param str view_name: null (required)
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_view_with_http_info(dataset_name, view_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_view_with_http_info(dataset_name, view_name, **kwargs)  # noqa: E501
            return data

    def get_view_with_http_info(self, dataset_name, view_name, **kwargs):  # noqa: E501
        """Returns information about a single view.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_view_with_http_info(dataset_name, view_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :param str view_name: null (required)
        :return: View
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_name', 'view_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_view" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_name' is set
        if ('dataset_name' not in params or
                params['dataset_name'] is None):
            raise ValueError("Missing the required parameter `dataset_name` when calling `get_view`")  # noqa: E501
        # verify the required parameter 'view_name' is set
        if ('view_name' not in params or
                params['view_name'] is None):
            raise ValueError("Missing the required parameter `view_name` when calling `get_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_name' in params:
            path_params['datasetName'] = params['dataset_name']  # noqa: E501
        if 'view_name' in params:
            path_params['viewName'] = params['view_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Schema.svc/datasets/{datasetName}/views/{viewName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='View',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_datasets(self, **kwargs):  # noqa: E501
        """Returns a list of all available datasets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_datasets(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DatasetListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_datasets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_datasets_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_datasets_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all available datasets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_datasets_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DatasetListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_datasets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Schema.svc/datasets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatasetListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_table_columns(self, dataset_name, table_name, **kwargs):  # noqa: E501
        """Returns the list of columns of a table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_table_columns(dataset_name, table_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :param str table_name: null (required)
        :return: ColumnListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_table_columns_with_http_info(dataset_name, table_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_table_columns_with_http_info(dataset_name, table_name, **kwargs)  # noqa: E501
            return data

    def list_table_columns_with_http_info(self, dataset_name, table_name, **kwargs):  # noqa: E501
        """Returns the list of columns of a table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_table_columns_with_http_info(dataset_name, table_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :param str table_name: null (required)
        :return: ColumnListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_name', 'table_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_table_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_name' is set
        if ('dataset_name' not in params or
                params['dataset_name'] is None):
            raise ValueError("Missing the required parameter `dataset_name` when calling `list_table_columns`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `list_table_columns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_name' in params:
            path_params['datasetName'] = params['dataset_name']  # noqa: E501
        if 'table_name' in params:
            path_params['tableName'] = params['table_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Schema.svc/datasets/{datasetName}/tables/{tableName}/columns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ColumnListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_tables(self, dataset_name, **kwargs):  # noqa: E501
        """Returns a list of the tables of a dataset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_tables(dataset_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :return: TableListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_tables_with_http_info(dataset_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_tables_with_http_info(dataset_name, **kwargs)  # noqa: E501
            return data

    def list_tables_with_http_info(self, dataset_name, **kwargs):  # noqa: E501
        """Returns a list of the tables of a dataset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_tables_with_http_info(dataset_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :return: TableListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_tables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_name' is set
        if ('dataset_name' not in params or
                params['dataset_name'] is None):
            raise ValueError("Missing the required parameter `dataset_name` when calling `list_tables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_name' in params:
            path_params['datasetName'] = params['dataset_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Schema.svc/datasets/{datasetName}/tables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_view_columns(self, dataset_name, view_name, **kwargs):  # noqa: E501
        """Returns the list of columns of a view  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_view_columns(dataset_name, view_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :param str view_name: null (required)
        :return: ColumnListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_view_columns_with_http_info(dataset_name, view_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_view_columns_with_http_info(dataset_name, view_name, **kwargs)  # noqa: E501
            return data

    def list_view_columns_with_http_info(self, dataset_name, view_name, **kwargs):  # noqa: E501
        """Returns the list of columns of a view  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_view_columns_with_http_info(dataset_name, view_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :param str view_name: null (required)
        :return: ColumnListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_name', 'view_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_view_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_name' is set
        if ('dataset_name' not in params or
                params['dataset_name'] is None):
            raise ValueError("Missing the required parameter `dataset_name` when calling `list_view_columns`")  # noqa: E501
        # verify the required parameter 'view_name' is set
        if ('view_name' not in params or
                params['view_name'] is None):
            raise ValueError("Missing the required parameter `view_name` when calling `list_view_columns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_name' in params:
            path_params['datasetName'] = params['dataset_name']  # noqa: E501
        if 'view_name' in params:
            path_params['viewName'] = params['view_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Schema.svc/datasets/{datasetName}/views/{viewName}/columns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ColumnListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_views(self, dataset_name, **kwargs):  # noqa: E501
        """Returns a list of the views of a dataset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_views(dataset_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :return: ViewListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_views_with_http_info(dataset_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_views_with_http_info(dataset_name, **kwargs)  # noqa: E501
            return data

    def list_views_with_http_info(self, dataset_name, **kwargs):  # noqa: E501
        """Returns a list of the views of a dataset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_views_with_http_info(dataset_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_name: null (required)
        :return: ViewListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_views" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_name' is set
        if ('dataset_name' not in params or
                params['dataset_name'] is None):
            raise ValueError("Missing the required parameter `dataset_name` when calling `list_views`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_name' in params:
            path_params['datasetName'] = params['dataset_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Schema.svc/datasets/{datasetName}/views', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ViewListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
