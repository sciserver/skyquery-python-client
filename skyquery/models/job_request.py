# coding: utf-8

"""
    SkyQuery REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from skyquery.models.copy_job import CopyJob  # noqa: F401,E501
from skyquery.models.export_job import ExportJob  # noqa: F401,E501
from skyquery.models.import_job import ImportJob  # noqa: F401,E501
from skyquery.models.query_job import QueryJob  # noqa: F401,E501
from skyquery.models.sql_script_job import SqlScriptJob  # noqa: F401,E501


class JobRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query_job': 'QueryJob',
        'export_job': 'ExportJob',
        'import_job': 'ImportJob',
        'copy_job': 'CopyJob',
        'sql_script_job': 'SqlScriptJob'
    }

    attribute_map = {
        'query_job': 'queryJob',
        'export_job': 'exportJob',
        'import_job': 'importJob',
        'copy_job': 'copyJob',
        'sql_script_job': 'sqlScriptJob'
    }

    def __init__(self, query_job=None, export_job=None, import_job=None, copy_job=None, sql_script_job=None):  # noqa: E501
        """JobRequest - a model defined in Swagger"""  # noqa: E501

        self._query_job = None
        self._export_job = None
        self._import_job = None
        self._copy_job = None
        self._sql_script_job = None
        self.discriminator = None

        if query_job is not None:
            self.query_job = query_job
        if export_job is not None:
            self.export_job = export_job
        if import_job is not None:
            self.import_job = import_job
        if copy_job is not None:
            self.copy_job = copy_job
        if sql_script_job is not None:
            self.sql_script_job = sql_script_job

    @property
    def query_job(self):
        """Gets the query_job of this JobRequest.  # noqa: E501


        :return: The query_job of this JobRequest.  # noqa: E501
        :rtype: QueryJob
        """
        return self._query_job

    @query_job.setter
    def query_job(self, query_job):
        """Sets the query_job of this JobRequest.


        :param query_job: The query_job of this JobRequest.  # noqa: E501
        :type: QueryJob
        """

        self._query_job = query_job

    @property
    def export_job(self):
        """Gets the export_job of this JobRequest.  # noqa: E501


        :return: The export_job of this JobRequest.  # noqa: E501
        :rtype: ExportJob
        """
        return self._export_job

    @export_job.setter
    def export_job(self, export_job):
        """Sets the export_job of this JobRequest.


        :param export_job: The export_job of this JobRequest.  # noqa: E501
        :type: ExportJob
        """

        self._export_job = export_job

    @property
    def import_job(self):
        """Gets the import_job of this JobRequest.  # noqa: E501


        :return: The import_job of this JobRequest.  # noqa: E501
        :rtype: ImportJob
        """
        return self._import_job

    @import_job.setter
    def import_job(self, import_job):
        """Sets the import_job of this JobRequest.


        :param import_job: The import_job of this JobRequest.  # noqa: E501
        :type: ImportJob
        """

        self._import_job = import_job

    @property
    def copy_job(self):
        """Gets the copy_job of this JobRequest.  # noqa: E501


        :return: The copy_job of this JobRequest.  # noqa: E501
        :rtype: CopyJob
        """
        return self._copy_job

    @copy_job.setter
    def copy_job(self, copy_job):
        """Sets the copy_job of this JobRequest.


        :param copy_job: The copy_job of this JobRequest.  # noqa: E501
        :type: CopyJob
        """

        self._copy_job = copy_job

    @property
    def sql_script_job(self):
        """Gets the sql_script_job of this JobRequest.  # noqa: E501


        :return: The sql_script_job of this JobRequest.  # noqa: E501
        :rtype: SqlScriptJob
        """
        return self._sql_script_job

    @sql_script_job.setter
    def sql_script_job(self, sql_script_job):
        """Sets the sql_script_job of this JobRequest.


        :param sql_script_job: The sql_script_job of this JobRequest.  # noqa: E501
        :type: SqlScriptJob
        """

        self._sql_script_job = sql_script_job

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
