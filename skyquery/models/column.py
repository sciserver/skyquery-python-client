# coding: utf-8

"""
    SkyQuery REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Column(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'data_type': 'str',
        'size': 'int',
        '_class': 'str',
        'quantity': 'str',
        'unit': 'str',
        'summary': 'str',
        'remarks': 'str'
    }

    attribute_map = {
        'name': 'name',
        'data_type': 'dataType',
        'size': 'size',
        '_class': 'class',
        'quantity': 'quantity',
        'unit': 'unit',
        'summary': 'summary',
        'remarks': 'remarks'
    }

    def __init__(self, name=None, data_type=None, size=None, _class=None, quantity=None, unit=None, summary=None, remarks=None):  # noqa: E501
        """Column - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._data_type = None
        self._size = None
        self.__class = None
        self._quantity = None
        self._unit = None
        self._summary = None
        self._remarks = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if data_type is not None:
            self.data_type = data_type
        if size is not None:
            self.size = size
        if _class is not None:
            self._class = _class
        if quantity is not None:
            self.quantity = quantity
        if unit is not None:
            self.unit = unit
        if summary is not None:
            self.summary = summary
        if remarks is not None:
            self.remarks = remarks

    @property
    def name(self):
        """Gets the name of this Column.  # noqa: E501


        :return: The name of this Column.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Column.


        :param name: The name of this Column.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def data_type(self):
        """Gets the data_type of this Column.  # noqa: E501


        :return: The data_type of this Column.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this Column.


        :param data_type: The data_type of this Column.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def size(self):
        """Gets the size of this Column.  # noqa: E501


        :return: The size of this Column.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Column.


        :param size: The size of this Column.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def _class(self):
        """Gets the _class of this Column.  # noqa: E501


        :return: The _class of this Column.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Column.


        :param _class: The _class of this Column.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def quantity(self):
        """Gets the quantity of this Column.  # noqa: E501


        :return: The quantity of this Column.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Column.


        :param quantity: The quantity of this Column.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def unit(self):
        """Gets the unit of this Column.  # noqa: E501


        :return: The unit of this Column.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Column.


        :param unit: The unit of this Column.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def summary(self):
        """Gets the summary of this Column.  # noqa: E501


        :return: The summary of this Column.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Column.


        :param summary: The summary of this Column.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def remarks(self):
        """Gets the remarks of this Column.  # noqa: E501


        :return: The remarks of this Column.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this Column.


        :param remarks: The remarks of this Column.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Column):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
